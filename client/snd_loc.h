/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
// snd_loc.h -- private sound functions

// !!! if this is changed, the asm code must change !!!
typedef struct
{
	int			left;
	int			right;
} portable_samplepair_t;

typedef struct
{
	int 		length;
	int 		loopstart;
	int 		speed;			// not needed, because converted on load?
	int 		channels;
	int 		width;
	qbyte		data[1];		// variable sized
} sfxcache_t;

typedef struct sfx_s
{
	char 		name[MAX_QPATH];
	sfxcache_t	*cache;
} sfx_t;

typedef struct
{
	sfx_t		*sfx;
	int			entnum;
	vec3_t		origin;
	// no velocity yet
	int			mode;			// 0 - none, 1 - stop, 2 - resume, 3 - restart
} loopsfx_t;

// a playsound_t will be generated by each call to S_StartSound,
// when the mixer reaches playsound->begin, the playsound will
// be assigned to a channel
typedef struct playsound_s
{
	struct playsound_s	*prev, *next;
	sfx_t		*sfx;
	float		volume;
	float		attenuation;
	int			entnum;
	int			entchannel;
	qboolean	fixed_origin;	// use origin field instead of entnum's origin
	vec3_t		origin;
	unsigned	begin;			// begin on this sample
} playsound_t;

typedef struct
{
	int			channels;
	int			samples;				// mono samples in buffer
	int			submission_chunk;		// don't mix less than this #
	int			samplepos;				// in mono samples
	int			samplebits;
	int			speed;
	qbyte		*buffer;
} dma_t;

// !!! if this is changed, the asm code must change !!!
typedef struct
{
	sfx_t		*sfx;			// sfx number
	int			leftvol;		// 0-255 volume
	int			rightvol;		// 0-255 volume
	int			end;			// end time in global paintsamples
	int 		pos;			// sample position in sfx
	int			entnum;			// to allow overriding a specific sound
	int			entchannel;		//
	vec3_t		origin;			// only use if fixed_origin is set
	vec_t		dist_mult;		// distance multiplier (attenuation/clipK)
	int			master_vol;		// 0-255 master volume
	qboolean	fixed_origin;	// use origin instead of fetching entnum's origin
	qboolean	autosound;		// from an entity->sound, cleared each frame
} channel_t;

typedef struct
{
	int			rate;
	int			width;
	int			channels;
	int			loopstart;
	int			samples;
	int			dataofs;		// chunk starts this many bytes from file start
} wavinfo_t;

typedef struct bgTrack_s
{
	int			file;
	wavinfo_t	info;

	void		*vorbisFile;
	int			(*read)( struct bgTrack_s *track, void *ptr, size_t size );
	int			(*seek)( struct bgTrack_s *track, int pos );
	void		(*close)( struct bgTrack_s *track );
} bgTrack_t;

/*
====================================================================

  SYSTEM SPECIFIC FUNCTIONS

====================================================================
*/

// initializes cycling through a DMA buffer and returns information on it
qboolean SNDDMA_Init(void);

// gets the current DMA position
int		SNDDMA_GetDMAPos(void);

// shutdown the DMA xfer.
void	SNDDMA_Shutdown(void);

void	SNDDMA_BeginPainting (void);

void	SNDDMA_Submit(void);

void	SNDOGG_Init( void );
void	SNDOGG_Shutdown( void );
qboolean SNDOGG_OpenTrack( char *name, bgTrack_t *track );
sfxcache_t *SNDOGG_LoadSfx( sfx_t *s );

void	SNDOAL_Info_f( void );
qboolean SNDOAL_Init( void );
void	SNDOAL_Shutdown( void );
void	SNDOAL_RegisterSound( sfx_t *sfx );
void	SNDOAL_FreeSounds( void );
int		SNDOAL_ChannelFirstToDie( int ch_idx, int first_to_die, int *life_left );
void	SNDOAL_Spatialize( int channum, int entnum, vec3_t origin, vec3_t velocity, float rolloff, float gain );
void	SNDOAL_StartPlaysound( playsound_t *ps );
void	SNDOAL_ClearBuffer( void );
void	SNDOAL_AddLoopSounds( void );
void	SNDOAL_RawSamples( int samples, int rate, int width, int channels, qbyte *data );
qboolean SNDOAL_UpdateBackgroundTrack( void );
void	SNDOAL_StopBackgroundTrack( void );
void	SNDOAL_Update( vec3_t origin, vec3_t velocity, vec3_t forward, vec3_t right, vec3_t up );

//====================================================================

// only begin attenuating sound volumes when outside the FULLVOLUME range
#define	SOUND_FULLVOLUME	80

#define	SOUND_LOOPATTENUATE	0.003

#define	MAX_CHANNELS			32

// during registration it is possible to have more sounds
// than could actually be referenced during gameplay,
// because we don't want to free anything until we are
// sure we won't need it.
#define	MAX_SFX					(MAX_SOUNDS*2)
extern	sfx_t	known_sfx[MAX_SFX];
extern	int		num_sfx;

#define	MAX_LOOPSFX				16
extern	loopsfx_t	loop_sfx[MAX_LOOPSFX];
extern	int		num_loopsfx;

#define	MAX_PLAYSOUNDS			128

extern	channel_t channels[MAX_CHANNELS];
extern	int		numChannels;
extern	int		numAutoLoops;

extern	qboolean s_openALEnabled;
extern	int		paintedtime;
extern	int		s_rawend;
extern	vec3_t	listener_origin;
extern	vec3_t	listener_forward;
extern	vec3_t	listener_right;
extern	vec3_t	listener_up;
extern	dma_t	dma;
extern	playsound_t	s_pendingplays;

#define	MAX_RAW_SAMPLES	16384
extern	portable_samplepair_t	s_rawsamples[MAX_RAW_SAMPLES];

extern cvar_t	*s_volume;
extern cvar_t	*s_musicvolume;
extern cvar_t	*s_nosound;
extern cvar_t	*s_khz;
extern cvar_t	*s_show;
extern cvar_t	*s_mixahead;
extern cvar_t	*s_testsound;
extern cvar_t	*s_swapstereo;
extern cvar_t	*s_vorbis;

extern mempool_t *s_mempool;

#define S_Malloc(size) Mem_Alloc(s_mempool,size)
#define S_Free(data) Mem_Free(data)

#define KHZ2RATE(khz) ((khz) == 48 ? 48000 : (khz) == 44 ? 44100 : (khz) == 22 ? 22050 : 11025)

wavinfo_t GetWavinfo (char *name, qbyte *wav, int wavlength);

void S_InitScaletable (void);

sfxcache_t *S_LoadSound (sfx_t *s);
void ResampleSfx (sfxcache_t *sc, qbyte *data, char *name);

void S_IssuePlaysound (playsound_t *ps);
channel_t *S_PickPlaysoundChannel (playsound_t *ps);

void S_PaintChannels(int endtime);

// picks a channel based on priorities, empty slots, number of channels
channel_t *S_PickChannel(int entnum, int entchannel);

// spatializes a channel
void S_Spatialize(channel_t *ch);
